service: customer-api

frameworkVersion: '2'

plugins:
    - serverless-webpack
    - serverless-offline
    - serverless-domain-manager

provider:
    name: aws
    runtime: nodejs12.x
    region: us-east-1
    stage: dev
    memorySize: 128
    endpointType: regional
    timeout: 5
    deploymentBucket:
        blockPublicAccess: true
    iamManagedPolicies:
    - 'arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess'

package:
  individually: true

custom:
    stage: ${opt:stage, self:provider.stage}
    projectName: customer-api
    customDomain:
        domainName: ${opt:stage, self:provider.stage}-customer-api.pagaleve.me
        basePath: "v1"
        stage: ${opt:stage, self:provider.stage}
        certificateName: "pagaleve.me"
        certificateRegion: ${opt:stage, self:provider.region}
        createRoute53Record: true
    webpack:
        includeModules:
            forceExclude:
                - aws-sdk

functions:
    login:
        role: ${ssm:${self:custom.stage}-lambda-cognito-iam-role} 
        handler: src/main/handlers/login-handler.handler
        events:
        - http:
            path: /login
            method: POST
            cors: true
        environment:
            COGNITO_USER_POOL_ID: ${ssm:${self:custom.stage}-cognito-user-pool-id}
            COGNITO_CLIENT_ID: ${ssm:${self:custom.stage}-cognito-user-client-id}
    saveCustomer:
        role: ${ssm:${self:custom.stage}-lambda-dynamodb-iam-role}
        handler: src/main/handlers/save-customer-handler.handler
        description: Create or update a customer
        events:
        - http:
            path: /customers
            method: PUT
            cors: true
            authorizer:
                name: authorizer
                arn: ${ssm:${self:custom.stage}-cognito-user-pool-arn}
        environment:
            DYNAMODB_CUSTOMER_TABLE_NAME: ${ssm:${self:custom.stage}-${self:custom.projectName}-dynamodb-customer-name}